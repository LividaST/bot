#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const chokidar_1 = __importDefault(require("chokidar"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const typescript_1 = __importDefault(require("typescript"));
let config = {
    srcDir: "src",
    outDir: "dist",
    deleteObsolete: true,
    tsconfig: "tsconfig.json",
    file: ""
}, child = null, copyTask;
const silentRun = !process.argv.includes("-s") && !process.argv.includes("--silent"), tsConsolePrefix = chalk_1.default.bgBlue(chalk_1.default.bold(chalk_1.default.white(" TS "))) + " ", dsConsolePrefix = chalk_1.default.yellow("</>  ");
if (silentRun)
    console.log(chalk_1.default.yellowBright(`${dsConsolePrefix}DevScript â€¢ v${require(__dirname + "/../package.json").version}`));
if (fs_1.existsSync(`${process.cwd()}/.devScript.json`)) {
    try {
        config = JSON.parse(fs_1.readFileSync(`${process.cwd()}/.devScript.json`, "utf-8"));
    }
    catch (e) {
        console.error("Invalid Syntax:", e.message);
        process.exit();
    }
}
if (!config.srcDir)
    config.srcDir = "src";
if (!config.outDir)
    config.outDir = "dist";
if (!config.deleteObsolete)
    config.deleteObsolete = true;
if (!config.tsconfig)
    config.tsconfig = "tsconfig.json";
const formatHost = {
    getCanonicalFileName: (path) => path,
    getCurrentDirectory: typescript_1.default.sys.getCurrentDirectory,
    getNewLine: () => ""
};
const createProgram = typescript_1.default.createSemanticDiagnosticsBuilderProgram;
if (process.argv.includes("--copyOnly")) {
    copyFiles();
}
else {
    const watcher = chokidar_1.default.watch(config.srcDir, {
        ignored: /(\.ts)/g,
        persistent: true,
        ignoreInitial: true
    });
    watcher.on("all", (path) => {
        console.log(dsConsolePrefix +
            chalk_1.default.yellowBright(`${chalk_1.default.cyan(path_1.basename(path))} updated, restarting...`));
        copyTask = copyFiles();
        restartChild();
    });
    const host = typescript_1.default.createWatchCompilerHost(`${process.cwd()}/${config.tsconfig}`, {}, typescript_1.default.sys, createProgram, reportDiagnostic, fileChange);
    typescript_1.default.createWatchProgram(host);
}
function reportDiagnostic(diagnostic) {
    if (silentRun)
        console.log(tsConsolePrefix +
            chalk_1.default.redBright(typescript_1.default.formatDiagnostic(diagnostic, formatHost)));
}
async function fileChange(diagnostic) {
    if ([6031, 6032].includes(diagnostic.code)) {
        if (silentRun)
            console.log(tsConsolePrefix + chalk_1.default.cyan(diagnostic.messageText.toString()));
        copyTask = copyFiles();
    }
    else if (diagnostic.code === 6194 &&
        parseInt(diagnostic.messageText.toString().replace(/\D/g, "")) === 0) {
        if (silentRun)
            console.log(tsConsolePrefix + chalk_1.default.green(diagnostic.messageText.toString()));
        restartChild();
    }
    else if (silentRun) {
        if ([6193, 6194].includes(diagnostic.code)) {
            console.log();
            console.log(tsConsolePrefix +
                chalk_1.default.bold(chalk_1.default.redBright(diagnostic.messageText.toString())));
        }
    }
}
async function copyFiles() {
    if (config.deleteObsolete)
        await deleteObsolete();
    if (fs_1.existsSync("package.json"))
        fs_extra_1.copySync("package.json", `${config.outDir}/package.json`);
    if (fs_1.existsSync("package-lock.json"))
        fs_extra_1.copySync("package-lock.json", `${config.outDir}/package-lock.json`);
    if (fs_1.existsSync("yarn.lock"))
        fs_extra_1.copySync("yarn.lock", `${config.outDir}/yarn.lock`);
    fs_extra_1.copySync("src", config.outDir, {
        filter: function (path) {
            if (path.includes("/node_modules"))
                return false;
            return path_1.extname(path) !== ".ts";
        }
    });
}
async function deleteObsolete() {
    let dist = await fast_glob_1.default(config.outDir + "/**/*", {
        onlyFiles: true
    }), src = await fast_glob_1.default(config.srcDir + "/**/*", {
        onlyFiles: true
    });
    let nDist = dist.map((f) => [f.replace(config.outDir, ""), f]);
    src = src
        .map((f) => f.replace(config.srcDir, "").split(".")[0])
        .filter((sf) => nDist.find((d) => d[0].split(".")[0] == sf));
    dist
        .filter((f) => !src.includes(f.replace(config.outDir, "").split(".")[0]))
        .map((f) => fs_extra_1.removeSync(f));
}
async function restartChild() {
    if (child && !child.killed) {
        child.unref();
        child.kill("SIGKILL");
    }
    await copyTask;
    if (fs_1.existsSync(process.cwd() + "/" + config.outDir + "/" + "index.js")) {
        if (config.file) {
            child = child_process_1.fork(process.cwd() + "/" + config.file, [], {
                cwd: config.outDir
            });
            return;
        }
        else if (fs_1.existsSync(process.cwd() + "/package.json")) {
            const pjson = require(process.cwd() + "/package.json");
            if (pjson.scripts && pjson.scripts.start) {
                child = child_process_1.spawn(fs_1.existsSync(process.cwd() + "/yarn.lock")
                    ? "yarn run --silent start"
                    : "npm run --silent start", {
                    shell: true,
                    stdio: "inherit"
                });
                return;
            }
        }
        child = child_process_1.fork(process.cwd() + "/" + config.outDir + "/index.js", [], {
            cwd: config.outDir
        });
        child.on("exit", (code) => {
            if (code === null)
                return;
            console.log(dsConsolePrefix +
                chalk_1.default.yellowBright(`Process exited with exit code ${chalk_1.default.yellow(chalk_1.default.cyan(code))}, waiting for changes...`));
            child = null;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,